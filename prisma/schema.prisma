generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String           @id @default(uuid())
  fullname        String
  email           String           @unique
  username        String           @unique
  password        String
  avatarUrl       String           @default("/default-avatar.jpg")
  role            Role             @default(USER)
  tweets          Tweet[]
  comments        Comment[]
  followers       Follow[]         @relation("FollowFollower")
  followings      Follow[]         @relation("FollowFollowing")
  likes           Like[]
  retweets        Retweet[]
  commentLikes    CommentLike[]
  commentRetweets CommentRetweet[]
}

model Follow {
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("FollowFollower", fields: [followerId], references: [id])
  following   User     @relation("FollowFollowing", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Comment {
  id              String           @id @default(uuid())
  author          String
  content         String
  tweetId         String
  createdAt       DateTime         @default(now())
  mediaUrls       String[]
  commentLikes    CommentLike[]
  retweetComments CommentRetweet[]
  tweet           Tweet            @relation(fields: [tweetId], references: [id])
  user            User             @relation(fields: [author], references: [id])
}

model Tweet {
  id        String    @id @default(uuid())
  author    String
  content   String
  createdAt DateTime  @default(now())
  mediaUrls String[]
  likes     Like[]
  comments  Comment[]
  retweets  Retweet[]
  user      User      @relation(fields: [author], references: [id])
}

model Like {
  createdAt DateTime @default(now())
  userId    String
  tweetId   String
  user      User     @relation(fields: [userId], references: [id])
  tweet     Tweet    @relation(fields: [tweetId], references: [id])

  @@id([userId, tweetId])
}

model Retweet {
  createdAt DateTime @default(now())
  userId    String
  tweetId   String
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, tweetId])
}

model CommentLike {
  createdAt DateTime @default(now())
  userId    String
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model CommentRetweet {
  createdAt DateTime @default(now())
  userId    String
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

enum Role {
  USER
  ADMIN
}
